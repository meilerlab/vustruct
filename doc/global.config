[Genome_PDB_Mapper]
dbhost = vgi01.accre.vanderbilt.edu
dbname = pdbmap_v14
dbuser = psb_access 
dbpass = psb-access

# The next two lines specificy the location of your project directories
# in an odd manner.  Place the last directory component in the second line
# as collboration=......
# Place the absolute path of all its parent directories in output_rootdir
output_rootdir = /dors/capra_lab/projects/psb_collab
collaboration = UDN

# Omit container_type if you are running a development version from the filesystem
# Options are Singularity, and Docker
container_type=Singularity

# cluster_type options are Slurm, and LSF
cluster_type=Slurm

# Define singularity_bind=string if your cluster needs an
#   export SINGULARITY_BIND=string
# statement before singularity is invoked by generated .slurm or .bsub files.
# Example:
# singularity_bind="/opt,/data:/mnt" << You will more likely boid to your ..../data directories

# Prior to invocation of "singularity shell image.simg", you may need another
# cluster-specific command exected.  Define singularity_pre_command if this is the case
# Example:
# singularity_pre_command=module load singularity

# Define ddg_config as the .config file in the root directory of your 
# ddg repository
ddg_config=/dors/capra_lab/projects/ddg_repo/ddg_repo_singularity.config

# No fully implemented, but the pipeline will attempt to change group ownerships
# of created files to the group name specified here:
chgrp_to = capra_lab

# If you adopt the recommended sibling directory approach for downloaded data,
# Changing this next line should make further data directory modifications
# unnecessary
downloaded_data=/dors/capra_lab/data

# Location of downloaded gnomad2.1.1 exomes (grch38 format)
gnomad_dir=%(downloaded_data)s/gnomad/2.1.1/liftover_grch38/vcf/exomes/exomes 
# Applications will concat the dir and filename, and replace % with chromosome # or X or Y
# (Mitochondrial protein variants are not included in gnomad 2.1.1)
gnomad_filename_template=gnomad.exomes.r2.1.1.sites.%%s.liftover_grch38.vcf.bgz

# Locations of downloaded pdb structures, swissmodels, modbase2020, and alphafold
pdb_dir = %(downloaded_data)s/pdb/
swiss_dir = %(downloaded_data)s/swissmodel/current/SWISS-MODEL_Repository/
swiss_summary = %(downloaded_data)s/swissmodel/current/SWISS-MODEL_Repository/INDEX.json
modbase2020_dir = %(downloaded_data)s/modbase/current/model
modbase2020_summary = %(downloaded_data)s/modbase/current/Homo_sapiens_2020.summary.txt
alphafold_dir = %(downloaded_data)s/alphafold

idmapping=%(downloaded_data)s/uniprot/current/HUMAN_9606_idmapping_sprot.dat.gz
interpro_dir=%(downloaded_data)s/interpro/current
sec2prim = %(downloaded_data)s/uniprot/current/uniprot_sec2prim_ac.txt
sprot = %(downloaded_data)s/uniprot/current/uniprot_sprot_human.dat

# Sifts is only needed for SQL loads - not to run the pipeline
sifts = %(downloaded_data)s/sifts/current/xml


vep = /ensembl/ensembl-vep/vep
vep_cache_dir = %(downloaded_data)s/ensembl/vep_cache
vep_assembly = GRCh38

# Not sure about pfam and create_new_db
pfam = pfam/pdb_pfam_mapping.txt
create_new_db = False

# config_dict parameters specific to udn_pipeline.py
# which are not actively supported in the pipeline
dssp_exe = /dors/capra_lab/projects/psb_collab/psb_pipeline/data/dssp/dssp_local.exe

# The location of chimera in the container
chimera_headless = /chimera_headless/bin/chimera

[PathProx]
# Default pathprox options for neutral and disease variants
# Custom variants may be specified with ..._variant_filename options
# Overrides should be placed in case-specific, pr perhaps user-specific
# .config files
neutral_variant_sql_label=gnomad38
neutral_variant_short_description=gnomAD38
disease1_variant_sql_label=clinvar
disease1_variant_short_description=Clinvar
disease2_variant_sql_label=cosmicV94
disease2_variant_short_description=COSMIC

# Specify slurm paramters necessary to get jobs to run
# The memory and time limits below work quite well in our
# experience
# 
# It is essential to supplement these settings with
# the your_user_name.config file in the same directory
# 
[SlurmParametersAll]
account = capra_lab_csb
ntasks = 1

[SlurmParametersPathProx]
time = 2-0
mem = 30GB


[SlurmParametersUDNSequence]
# These are for ddg and sequence analysis (udn_pipeline.py configs)
time = 12:00:00
mem = 10GB

[SlurmParametersDDGCartesian]
# These are for ddg and sequence analysis (udn_pipeline.py configs)
time = 4-00:00:00
# time was 96
# mem was 10GB
mem = 10GB

[SlurmParametersDDGMonomer]
# These are for ddg and sequence analysis (udn_pipeline.py configs)
time = 4-00:00:00
# time was 96
# mem was 10GB
mem = 10GB

[SlurmParametersDigenicAnalysis]
# Run casewide, psb_genedicts.py is not very demanding of resources
time = 0-1
mem = 30GB


[SlurmParametersReport]
# These are used when the psb_rep.py program is called with --slurm to make a .slurm run
# to simultaneously run all the reports  Usually only done for BIG mutation sets.
time = 1:00:00
mem = 3GB
