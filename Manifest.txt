VUStruct calculations are primarily deployed in Singularity (Apptainer) containers.

If you wish to create a local command-line implementation (or website), then you will need
local copies of the containers, as described in the file containers/deployment.txt

The instructions below are primarily for creating an editable set of development-oriented source files
in the filesystem.
---------------------------------------------------------------------------------------------------------------
1) Development can take place either on the filesystem of the cluster, or on a local development workstation, 
or perhaps in a virtual machine in which you have root access.

These instructions assume that the VUStruct code base will run an unmodified ENSEMBL VEP and PERL API functions
out of their respective containers.  It is possible to install perl and bypass these containers, but that is 
quite involved and left to the end of this documentation

A benefit of root access is that you can run ENSEMBL PERL API routines using the OS's native PERL5 install and 
update mechanisms.  Without root access, you will have to download and build a local copy of PERL which you can
add modules to (such as SQL).

Each development option comes with strenghts and weaknesses.  Local development is excellent for working in
the PyCharm IDE for examples.  But the slow latency of storage on a compute cluster renders that same 
sophisticated IDE worthless.

Development on the cluster is of course essential for end-to-end case processing.

It sometimes is helpful to work iteratively...  One can work locally on one of the pipeline modules, then copy
it to the cluster to run an entire test care, then repeat.

There is no one right answer for every development task.

Therefore, I supplement the steps below with options

---------------------------------------------------------------------------------------------------------------

1) Checkout meilerlab/vustruct first.  This is the "pipeline" development code

Example on the Vanderbilt accre cluster
   $ cd /dors/capra_lab/users/mothcw
   $ git clone https://github.com/meilerlab/vustruct.git
   
Or for development off fast local storage:   

   $ cd ~
   $ git clone https://github.com/meilerlab/vustruct.git

   $ cd vustruct
   $ git status # << Check that you are on the vustruct branch, typically master, you expect

2) Checkout CapraLab/pdbmap to /dors/capra_lab/users/vustruct/pdbmap.  pdbmap is a general purpose
   structure and sequence management library

   $ cd to the vustruct directory created in the above step 1.
   $ git clone https://github.com/CapraLab/pdbmap/
   $ git status # << Check that you are on the pdbmap branch, typically master, you expect

Note: pdbmap resides "under" vustruct.  However, it is it's own github repository by virtual of an entry in the ../.gitignore file

3) To build a complete local development environment, it will be necessary to download external data from many locations.
   The download scripts should not be entangled with the other two repositories

   $ cd ~/
   $ git clone https://github.com/CapraLab/pipeline_download_scripts.git

See Readme.md and instructions in the indivual directories for more details.

4) Configure a python development environment.

For several years, we used Anaconda.  However, with the new distribution restrictions we are tending to develop
using the environments provided by Rocky9 Linux "natively" or, for development on our cluster 
$ module load StdEnv

At Vanderbilt, this above or ($ module load SciPy-2024b) load a reference platform of tools documented here:
https://docs.alliancecan.ca/wiki/Technical_documentation

$ which python3
/cvmfs/soft.computecanada.ca/gentoo/2023/x86-64-v3/usr/bin/python3

On this software, we layer a conda environment which we init in .bashrc with:

# activate the vustruct virtual environment
source ~/venv/vustruct/bin/activate

4a) THE MAIN POINT is that you need to have a python library stack specific to our software
Perform these "pip installs" from your vustruct checkout directory

$ ./rampup/pip_install_modules.bash

5) PERL
VUStruct's approach to perl (interfaces to ENSEMBL genomic databases and VEP)
is evolving.  Geerally, we now run perl codes only via container
invocations.  So this section should be unnecessary.  But, if one were
developing new PERL routines, it might be helpful

Use "ln -s" so three perl scripts in pdbmap/lib are visible in pdbmap directory

cd vustruct/pdbmap
ln -sv lib/*.pl .

See mode details on PERL below

6) Install the tabix and bgzip programs.  

With root access, On Rocky 9 you do this easily  with:

# dnf install htslib-tools            # to get bgzip and tabix
# dnf install htslib-devel            # just in case you want to develop tools at API level

If you lack root access, you should download and config/make htslib from http://www.htslib.org/   
It is a relatively quick and painless build.

Add the directory containing the bgzip and tabix binaries to your PATH (in ~/.bashrc always a good idea).

=================================================================================================================
=================================================================================================================
PERL installation details (to be avoided if at all possible).  The pain points arise from:
- mysql calls from PERL require C libraries that may or may not be present or compatible with the environment
- Unlike python, there is no widely-adopted method to create a "local conda-esque" environment that runs well
  on all cluster nodes.
- If you are using anaconda python for development, there are conflicts with a PERL binary they seem to include 
  for some reasons.

I recommend you skip installation of PERL and embrace the singularity/apptainer runs of VEP and the ENSEMBL API
in the containers

If you insist.....
a) INSTALL (or configure) PERL to support the Ensembl PERL API.

Access to the Ensembl PERL API requires PERL5 and BioPerl.

7) Install the ENSEMBL PERL files.

Embrace "git", and the "Ensembl git tools" which need to precede git in your PATH.  Full details of how to install the tools, set the PATH, and _then_ select the branch for the current ENSEMBL version (113) are at:

http://useast.ensembl.org/info/docs/api/api_git.html

Loading SQL databases is explained here:
http://useast.ensembl.org/info/docs/api/api_installation.html

Follow the instructions at the above link.  I prefer installing this to an "ensembl/" named top-level directory, and not "src", but otherwise, I do everything asked.  The final step, selecting the correct branch for the database version is important and will be quite like this in the documentation

$ cd ensembl
$ git ensembl --checkout --branch release/113 api

2020-Oct-31 Update: A potential nuisance is that the anaconda python installation conda insists on creating a ~/perl5 
somewhere along the above setup.  Because we need SQL database access from PERL, bioperl, and other modules that
our compute cluster may not offer without 'root' access, we will load up our own perl binaries, libs and environment, with care

6a)

Double-check the (relatively flexible) PERL5 version requirements of the Ensembl Library.  

There are presently 3 ways to get a suitable PERL environment for running the Ensembl PERL API in the  VUStruct pipeline in development mode.

1) As "root", run the yum and cpanm command lines in docker/Dockerfile.1.perl.  This will add necessary 
2) If you lack root access, but are using the Vanderbilt accre cluster, this "module load" seems to prepare the environment fine and provides a PERL5 version with mysql access.

$ module load BioPerl/1.7.1

3) You can attempt to build PERL from C source code.  Those instructions are complex and error prone on clusters which may pack needed C libraries.  

Once you have completed one of the 3 PERL installation options, skip down to 6b) below to load the ensembl PERL API and BioPerl that it needs

Instructions for 3) above follow, before 6b)

3) continued...  To build your own PERL from C source, follow exactly the wget DOWNLOAD instruction only - and use other info for inspiration at the site which
is the center of the PERL universe:

https://www.cpan.org/src/README.html

2020-Oct-31: Example of how I used the web info above
I performed these commands to load ENSEMBL compatible PERL5 into the /dors/capra_lab/psbadmin/localperl directory

>> This process does NOT work on an ACCRE node, because ACCRE lacks mysql development header files. <<

Your commands will differ as perl versions shift around

$ cd /dors/capra_lab/users/mothcw/
$ wget https://www.cpan.org/src/5.0/perl-5.34.0.tar.gz
$ tar -xzf perl-5.34.0.tar.gz
$ cd perl.5.34.0

# Get rid of the annoying PERL5LIB set by anaconda's conda init
# as we do NOT want ANY of our fresh PERL getting tangled up with this
# directory location

$ unset PERL5LIB

# ^^^^  You should add this unset command above to your ~/.bashrc as well, after the conda init <<< block
# because we really need to control the PERL environment in a way that is accessible to all pipeline
# users

# Critically important to config the -Dprefix as shown here - NOT at the webpage!!!
$ ./Configure -des -Dprefix=/dors/capra_lab/users/mothcw/localperl

# Build and install in the -Dprefix dir you set above
$ make
$ make test
$ make install

Modify your ~/bash_config or ~/.bashrc so that your PATH includes your new /dors/capra_lab/users/mothcw/localperl/bin directory before other PERL binary locations.
Verify with:

$ which perl

which must rerefernce your local perl as in:
/dors/capra_lab/users/mothcw/localperl/bin/perl

$ which cpan # should also report cpan in that same directory

# CRITICAL -> Configure cpan to use your new local perl system for all module installations:
$ cpan
> o conf makepl_org INSTALL_BASE=/dors/capra_lab/users/mothcw/localperl
> o conf commit
> quit

# THEN, install DBI.pm  (if needed)
# The goal is to get PERL to be able to talk to a SQL server
# And I endless go round and round as PERL changes - sorry and good luck:
# 
$ perl -MCPAN -e 'install Bundle::DBI'      # See https://metacpan.org/pod/Bundle::DBI

# As the screen whizzes by during execution of above, watch for references to the PERL directory
# If not /dors/capra_lab/users/mothcw/local_perl, then things have come off the rails.  This is very easy 
# as there are these conflicts between this new perl, Anaconda conda init, and the operating system PERL
# if you have missed an instruction above

# The above ends with some test failures because DBI is missing... which takes us to....

6a.2) Install DBD::mysql
The "punch line" is that you will do

$ cpan DBD::mysql

as described here:
https://metacpan.org/pod/distribution/DBD-mysql/lib/DBD/mysql/INSTALL.pod

# HOWEVER, this above will not work until the C compiler can see /usr/include/mysql/mysql.h and 
# other mariadb development supports, which includes /usr/lib64/mysql/mysql_config
# If you do not have this, talk to your root administrator to load these

# Getting the above to support a database query is simply brutal in my hands.  Good luck!
# Other commands that seem to help:
$ cpan Devel::CheckLib
$ cpan Try::Tiny

6b) Load bioperl-1.2.3 in the specific manner required by Ensembl PERL API:

Following the video:
https://useast.ensembl.org/info/docs/api/api_installation.html

with (likely stale) documentation here:
ftp://ftp.ebi.ac.uk/pub/databases/ensembl/Helpdesk/API_video_script.txt

$ cd /dors/capra_lab/users/mothcw
$ mkdir ensembl
$ cd ensembl            <<<< I use "ensembl" here and NOT "src" as in the video

$  wget https://cpan.metacpan.org/authors/id/C/CJ/CJFIELDS/BioPerl-1.6.924.tar.gz 
$ tar zxvf BioPerl-1.6.924.tar.gz

It can be convenient to 

$ ln -s BioPerl-1.6.924 bioperl-live

Otherwise, Be sure to update your /dors/capra_lab/users/mothcw/psb_prep.bash file
to reflect the PATH of the specific bioperl version you install

6c) Clone 5 Ensembl PERL API repositories:

$ cd /dors/capra_lab/users/mothcw/ensembl

I recommend you follow the procedures here.  It is very elegant to download using Ensembl's
git extension, and then set the branch to the Ensembl Api you are using
https://uswest.ensembl.org/info/docs/api/api_git.html

6d) Try::Tiny
cpan Try::Tiny

6e) Install the Ensembl Variant Effect Predictor (VEP)
See instructions here:  https://m.ensembl.org/info/docs/tools/vep/script/vep_download.html

You should wind up with these subdirectories and a tar file like this one in your
/dors/capra_lab/users/mothcw/ensembl directory

BioPerl-1.6.924/
BioPerl-1.6.924.tar.gz*
bioperl-live@
ensembl/
ensembl-compara/
ensembl-funcgen/
ensembl-git-tools/
ensembl-io/
ensembl-variation/
ensembl-vep/

I like for ensembl-vep directory to be a sibling to the other ensembl- directories 
installed above.

$ cd /dors/capra_lab/users/mothcw/ensembl
$ git clone https://github.com/Ensembl/ensembl-vep.git
$ cd ensembl-vep
$ git pull
# Take care to checkout the ensembl perl API version you selected api with 
# A similar branch selection kind of command.  For PERL Api and data v100 use:
$ git checkout release/100  # Or whatever Ensembl release you have data pre-loaded for

# There is a final command, and the installation of the so called "cache files" is critical
# to the high performance of the VEP program.  Please make sure that your choice
# of cache Directory is recorded in the pipeline's $psbbin/../config/global.config file
# 
# Here is the approach taken in our lab:
$ perl INSTALL.pl --VERSION 100 --CACHEDIR /dors/capra_lab/data/ensembl/vep_cache

6e) Testing PERL and SQL
TEST 1:
Try the command:
$ transcript_to_genomic.pl ENST00000375528

You should get a lovely table of chromosome positions and amino acid translations.  The transcript_to_genomic.pl
/dors/capra_lab/users/mothcw/pdbmap

TEST 2:
$ /dors/capra_lab/users/mothcw/ensembl/ensembl-vep/vep

This is the main routine of a super-complex PERL code.  If you get a help screen, at least you are making _some_ progress
There is a t/ test directory under ensembl-vep, but you'd have to be sure to repoint to your local
SQL server.

The ultimate test is perhaps whether you can "parse_udn_report.py" to get a pipeline run going.  Watch for vep launch errors, or empty missense output files


7) Loading the SQL database

7a) The Pipeline uses the Ensembl PERL API, which access both large cache files (--cache in vep) and a SQL database that you must download, and prepare with a variety of mysqlimport commands.

In theory, you _can_ redirect youf ENSEMBL_REGISTRY file to ensembl's internet-open SQL servers.  In practice, these are excrutiatingly slow.

Full instructions are here:

